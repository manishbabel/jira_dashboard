(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
        if (typeof tnt === "undefined") {
            module.exports = tnt = {};
        }
        tnt.tooltip = require("./index.js");

    },{"./index.js":2}],2:[function(require,module,exports){
        module.exports = tooltip = require("./src/tooltip.js");

    },{"./src/tooltip.js":5}],3:[function(require,module,exports){
        module.exports = require("./src/api.js");

    },{"./src/api.js":4}],4:[function(require,module,exports){
        var api = function (who) {

            var _methods = function () {
                var m = [];

                m.add_batch = function (obj) {
                    m.unshift(obj);
                };

                m.update = function (method, value) {
                    for (var i=0; i<m.length; i++) {
                        for (var p in m[i]) {
                            if (p === method) {
                                m[i][p] = value;
                                return true;
                            }
                        }
                    }
                    return false;
                };

                m.add = function (method, value) {
                    if (m.update (method, value) ) {
                    } else {
                        var reg = {};
                        reg[method] = value;
                        m.add_batch (reg);
                    }
                };

                m.get = function (method) {
                    for (var i=0; i<m.length; i++) {
                        for (var p in m[i]) {
                            if (p === method) {
                                return m[i][p];
                            }
                        }
                    }
                };

                return m;
            };

            var methods    = _methods();
            var api = function () {};

            api.check = function (method, check, msg) {
                if (method instanceof Array) {
                    for (var i=0; i<method.length; i++) {
                        api.check(method[i], check, msg);
                    }
                    return;
                }

                if (typeof (method) === 'function') {
                    method.check(check, msg);
                } else {
                    who[method].check(check, msg);
                }
                return api;
            };

            api.transform = function (method, cbak) {
                if (method instanceof Array) {
                    for (var i=0; i<method.length; i++) {
                        api.transform (method[i], cbak);
                    }
                    return;
                }

                if (typeof (method) === 'function') {
                    method.transform (cbak);
                } else {
                    who[method].transform(cbak);
                }
                return api;
            };

            var attach_method = function (method, opts) {
                var checks = [];
                var transforms = [];

                var getter = opts.on_getter || function () {
                    return methods.get(method);
                };

                var setter = opts.on_setter || function (x) {
                    for (var i=0; i<transforms.length; i++) {
                        x = transforms[i](x);
                    }

                    for (var j=0; j<checks.length; j++) {
                        if (!checks[j].check(x)) {
                            var msg = checks[j].msg ||
                                ("Value " + x + " doesn't seem to be valid for this method");
                            throw (msg);
                        }
                    }
                    methods.add(method, x);
                };

                var new_method = function (new_val) {
                    if (!arguments.length) {
                        return getter();
                    }
                    setter(new_val);
                    return who; // Return this?
                };
                new_method.check = function (cbak, msg) {
                    if (!arguments.length) {
                        return checks;
                    }
                    checks.push ({check : cbak,
                        msg   : msg});
                    return this;
                };
                new_method.transform = function (cbak) {
                    if (!arguments.length) {
                        return transforms;
                    }
                    transforms.push(cbak);
                    return this;
                };

                who[method] = new_method;
            };

            var getset = function (param, opts) {
                if (typeof (param) === 'object') {
                    methods.add_batch (param);
                    for (var p in param) {
                        attach_method (p, opts);
                    }
                } else {
                    methods.add (param, opts.default_value);
                    attach_method (param, opts);
                }
            };

            api.getset = function (param, def) {
                getset(param, {default_value : def});

                return api;
            };

            api.get = function (param, def) {
                var on_setter = function () {
                    throw ("Method defined only as a getter (you are trying to use it as a setter");
                };

                getset(param, {default_value : def,
                    on_setter : on_setter}
                );

                return api;
            };

            api.set = function (param, def) {
                var on_getter = function () {
                    throw ("Method defined only as a setter (you are trying to use it as a getter");
                };

                getset(param, {default_value : def,
                    on_getter : on_getter}
                );

                return api;
            };

            api.method = function (name, cbak) {
                if (typeof (name) === 'object') {
                    for (var p in name) {
                        who[p] = name[p];
                    }
                } else {
                    who[name] = cbak;
                }
                return api;
            };

            return api;

        };

        module.exports = exports = api;
    },{}],5:[function(require,module,exports){
        var apijs = require("tnt.api");

        var tooltip = function () {
            "use strict";

            var drag = d3.drag();
            var tooltip_div;

            var conf = {
                container: undefined,
                position : "right",
                allow_drag : true,
                show_closer : false,
                fill : function () { throw "fill is not defined in the base object"; },
                width : 180,
                id : 1
            };

            var t = function (data, event) {
                drag
                    .subject(function(){
                        return {
                            x : parseInt(d3.select(this).style("left")),
                            y : parseInt(d3.select(this).style("top"))
                        };
                    })
                    .on("drag", function() {
                        if (conf.allow_drag) {
                            d3.select(this)
                                .style("left", d3.event.x + "px")
                                .style("top", d3.event.y + "px");
                        }
                    });

                // TODO: Why do we need the div element?
                // It looks like if we anchor the tooltip in the "body"
                // The tooltip is not located in the right place (appears at the bottom)
                // See clients/tooltips_test.html for an example
                var containerElem = conf.container;
                if (!containerElem) {
                    containerElem = selectAncestor(this, "div");
                    if (containerElem === undefined) {
                        // We require a div element at some point to anchor the tooltip
                        return;
                    }
                }

                tooltip_div = d3.select(containerElem)
                    .append("div")
                    .attr("class", "tnt_tooltip")
                    .classed("tnt_tooltip_active", true)  // TODO: Is this needed/used???
                    .call(drag);

                // prev tooltips with the same header
                d3.select("#tnt_tooltip_" + conf.id).remove();

                if ((d3.event === null) && (event)) {
                    d3.event = event;
                }
                var d3mouse = d3.mouse(containerElem);
                d3.event = null;

                var xoffset = -10;
                var yoffset = 10;
                if (conf.position === "left") {
                    xoffset = conf.width;
                }

                tooltip_div.attr("id", "tnt_tooltip_" + conf.id);

                // We place the tooltip
                tooltip_div
                    .style("left", (d3mouse[0] - xoffset) + "px")
                    .style("top", (d3mouse[1] - yoffset) + "px");

                // Close
                if (conf.show_closer) {
                    tooltip_div
                        .append("div")
                        .attr("class", "tnt_tooltip_closer")
                        .on ("click", function () {
                            t.close();
                        });
                }

                conf.fill.call(tooltip_div.node(), data);

                // return this here?
                return t;
            };

            // gets the first ancestor of elem having tagname "type"
            // example : var mydiv = selectAncestor(myelem, "div");
            function selectAncestor (elem, type) {
                type = type.toLowerCase();
                if (elem.parentNode === null) {
                    console.log("No more parents");
                    return undefined;
                }
                var tagName = elem.parentNode.tagName;

                if ((tagName !== undefined) && (tagName.toLowerCase() === type)) {
                    return elem.parentNode;
                } else {
                    return selectAncestor (elem.parentNode, type);
                }
            }

            var api = apijs(t)
                .getset(conf);

            api.check('position', function (val) {
                return (val === 'left') || (val === 'right');
            }, "Only 'left' or 'right' values are allowed for position");

            api.method('close', function () {
                if (tooltip_div) {
                    tooltip_div.remove();
                }
            });

            return t;
        };

        tooltip.list = function () {
            // list tooltip is based on general tooltips
            var t = tooltip();
            var width = 180;

            t.fill (function (obj) {
                var tooltip_div = d3.select(this);
                var obj_info_list = tooltip_div
                    .append("table")
                    .attr("class", "tnt_zmenu")
                    .attr("border", "solid")
                    .style("width", t.width() + "px");

                // Tooltip header
                if (obj.header) {
                    obj_info_list
                        .append("tr")
                        .attr("class", "tnt_zmenu_header")
                        .append("th")
                        .text(obj.header);
                }

                // Tooltip rows
                var table_rows = obj_info_list.selectAll(".tnt_zmenu_row")
                    .data(obj.rows)
                    .enter()
                    .append("tr")
                    .attr("class", "tnt_zmenu_row");

                table_rows
                    .append("td")
                    .style("text-align", "center")
                    .html(function(d,i) {
                        return obj.rows[i].value;
                    })
                    .each(function (d) {
                        if (d.link === undefined) {
                            return;
                        }
                        d3.select(this)
                            .classed("link", 1)
                            .on('click', function (d) {
                                d.link(d.obj);
                                t.close.call(this);
                            });
                    });
            });
            return t;
        };

        tooltip.table = function () {
            // table tooltips are based on general tooltips
            var t = tooltip();

            var width = 180;

            t.fill (function (obj) {
                var tooltip_div = d3.select(this);

                var obj_info_table = tooltip_div
                    .append("table")
                    .attr("class", "tnt_zmenu")
                    .attr("border", "solid")
                    .style("width", t.width() + "px");

                // Tooltip header
                if (obj.header) {
                    obj_info_table
                        .append("tr")
                        .attr("class", "tnt_zmenu_header")
                        .append("th")
                        .attr("colspan", 2)
                        .text(obj.header);
                }

                // Tooltip rows
                var table_rows = obj_info_table.selectAll(".tnt_zmenu_row")
                    .data(obj.rows)
                    .enter()
                    .append("tr")
                    .attr("class", "tnt_zmenu_row");

                table_rows
                    .append("th")
                    .attr("colspan", function (d, i) {
                        if (d.value === "") {
                            return 2;
                        }
                        return 1;
                    })
                    .attr("class", function (d) {
                        if (d.value === "") {
                            return "tnt_zmenu_inner_header";
                        }
                        return "tnt_zmenu_cell";
                    })
                    .html(function(d,i) {
                        return obj.rows[i].label;
                    });

                table_rows
                    .append("td")
                    .html(function(d,i) {
                        if (typeof obj.rows[i].value === 'function') {
                            obj.rows[i].value.call(this, d);
                        } else {
                            return obj.rows[i].value;
                        }
                    })
                    .each(function (d) {
                        if (d.value === "") {
                            d3.select(this).remove();
                        }
                    })
                    .each(function (d) {
                        if (d.link === undefined) {
                            return;
                        }
                        d3.select(this)
                            .classed("link", 1)
                            .on('click', function (d) {
                                d.link(d.obj);
                                t.close.call(this);
                            });
                    });
            });

            return t;
        };

        tooltip.plain = function () {
            // plain tooltips are based on general tooltips
            var t = tooltip();

            t.fill (function (obj) {
                var tooltip_div = d3.select(this);

                var obj_info_table = tooltip_div
                    .append("table")
                    .attr("class", "tnt_zmenu")
                    .attr("border", "solid")
                    .style("width", t.width() + "px");

                if (obj.header) {
                    obj_info_table
                        .append("tr")
                        .attr("class", "tnt_zmenu_header")
                        .append("th")
                        .text(obj.header);
                }

                if (obj.body) {
                    obj_info_table
                        .append("tr")
                        .attr("class", "tnt_zmenu_row")
                        .append("td")
                        .style("text-align", "center")
                        .html(obj.body);
                }
            });

            return t;
        };

        module.exports = exports = tooltip;

    },{"tnt.api":3}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
